#!/usr/bin/env python3
"""
Script de Migra√ß√£o - Sistema de Agentes Especializados
Cria novas tabelas e estruturas necess√°rias
"""

from google.cloud import bigquery
import sys
import json
from datetime import datetime

def create_agent_configurations_table():
    """Criar tabela agent_configurations"""
    
    client = bigquery.Client(project="flower-ai-generator")
    
    table_id = "flower-ai-generator.saas_chat_generator.agent_configurations"
    
    schema = [
        bigquery.SchemaField("config_id", "STRING", mode="REQUIRED", description="ID √∫nico da configura√ß√£o"),
        bigquery.SchemaField("chat_id", "STRING", mode="REQUIRED", description="ID do chat associado"),
        bigquery.SchemaField("user_id", "STRING", mode="REQUIRED", description="ID do usu√°rio propriet√°rio"),
        bigquery.SchemaField("agent_type", "STRING", mode="REQUIRED", description="Tipo do agente especializado"),
        bigquery.SchemaField("configuration", "STRING", mode="REQUIRED", description="Configura√ß√µes do agente em JSON"),
        bigquery.SchemaField("conversation_types", "STRING", mode="NULLABLE", description="Tipos de conversa esperados em JSON"),
        bigquery.SchemaField("tracking_keywords", "STRING", mode="NULLABLE", description="Palavras-chave para tracking em JSON"),
        bigquery.SchemaField("prompt_variables", "STRING", mode="NULLABLE", description="Vari√°veis extra√≠das para o prompt em JSON"),
        bigquery.SchemaField("status", "STRING", mode="REQUIRED", description="Status da configura√ß√£o (active, inactive)"),
        bigquery.SchemaField("created_at", "TIMESTAMP", mode="REQUIRED", description="Data de cria√ß√£o"),
        bigquery.SchemaField("updated_at", "TIMESTAMP", mode="REQUIRED", description="Data da √∫ltima atualiza√ß√£o"),
    ]
    
    table = bigquery.Table(table_id, schema=schema)
    
    try:
        table = client.create_table(table)
        print(f"‚úÖ Tabela agent_configurations criada: {table.table_id}")
        return True
    except Exception as e:
        if "already exists" in str(e).lower():
            print("‚ö†Ô∏è  Tabela agent_configurations j√° existe")
            return True
        else:
            print(f"‚ùå Erro ao criar tabela agent_configurations: {e}")
            return False

def create_conversation_analytics_table():
    """Criar tabela para analytics de conversas (prepara√ß√£o futura)"""
    
    client = bigquery.Client(project="flower-ai-generator")
    
    table_id = "flower-ai-generator.saas_chat_generator.conversation_analytics"
    
    schema = [
        bigquery.SchemaField("analytics_id", "STRING", mode="REQUIRED", description="ID √∫nico do registro de analytics"),
        bigquery.SchemaField("chat_id", "STRING", mode="REQUIRED", description="ID do chat"),
        bigquery.SchemaField("conversation_id", "STRING", mode="REQUIRED", description="ID da conversa espec√≠fica"),
        bigquery.SchemaField("user_id", "STRING", mode="REQUIRED", description="ID do usu√°rio"),
        bigquery.SchemaField("conversation_type", "STRING", mode="NULLABLE", description="Tipo classificado da conversa"),
        bigquery.SchemaField("keywords_detected", "STRING", mode="NULLABLE", description="Palavras-chave detectadas em JSON"),
        bigquery.SchemaField("sentiment_score", "FLOAT", mode="NULLABLE", description="Pontua√ß√£o de sentimento (futuro)"),
        bigquery.SchemaField("resolution_status", "STRING", mode="NULLABLE", description="Status de resolu√ß√£o da conversa"),
        bigquery.SchemaField("total_messages", "INTEGER", mode="REQUIRED", description="Total de mensagens na conversa"),
        bigquery.SchemaField("duration_minutes", "INTEGER", mode="NULLABLE", description="Dura√ß√£o da conversa em minutos"),
        bigquery.SchemaField("created_at", "TIMESTAMP", mode="REQUIRED", description="Data da an√°lise"),
    ]
    
    table = bigquery.Table(table_id, schema=schema)
    
    try:
        table = client.create_table(table)
        print(f"‚úÖ Tabela conversation_analytics criada: {table.table_id}")
        return True
    except Exception as e:
        if "already exists" in str(e).lower():
            print("‚ö†Ô∏è  Tabela conversation_analytics j√° existe")
            return True
        else:
            print(f"‚ùå Erro ao criar tabela conversation_analytics: {e}")
            return False

def add_agent_type_to_chats_table():
    """Verificar se a coluna agent_type existe na tabela chats"""
    
    client = bigquery.Client(project="flower-ai-generator")
    
    try:
        # Verificar schema atual da tabela chats
        table_ref = client.get_table("flower-ai-generator.saas_chat_generator.chats")
        
        # Verificar se j√° tem a coluna agent_type (via chat_type)
        existing_fields = [field.name for field in table_ref.schema]
        
        if 'chat_type' in existing_fields:
            print("‚úÖ Coluna chat_type j√° existe na tabela chats (pode ser usada como agent_type)")
            return True
        else:
            print("‚ö†Ô∏è  Coluna chat_type n√£o encontrada, mas sistema funcionar√° normalmente")
            return True
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar tabela chats: {e}")
        return False

def test_system_integration():
    """Testar integra√ß√£o b√°sica do sistema"""
    
    client = bigquery.Client(project="flower-ai-generator")
    
    try:
        # Teste 1: Verificar se tabelas existem
        tables_to_check = [
            "flower-ai-generator.saas_chat_generator.users",
            "flower-ai-generator.saas_chat_generator.chats", 
            "flower-ai-generator.saas_chat_generator.messages",
            "flower-ai-generator.saas_chat_generator.chat_documents",
            "flower-ai-generator.saas_chat_generator.agent_configurations"
        ]
        
        for table_id in tables_to_check:
            try:
                client.get_table(table_id)
                print(f"‚úÖ Tabela verificada: {table_id.split('.')[-1]}")
            except Exception as e:
                print(f"‚ùå Tabela n√£o encontrada: {table_id.split('.')[-1]} - {e}")
                return False
        
        # Teste 2: Query simples na nova tabela
        query = """
        SELECT COUNT(*) as total
        FROM `flower-ai-generator.saas_chat_generator.agent_configurations`
        """
        
        query_job = client.query(query)
        results = list(query_job.result())
        
        print(f"‚úÖ Teste de query na agent_configurations: {results[0]['total']} registros")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste de integra√ß√£o: {e}")
        return False

def insert_sample_agent_templates():
    """Inserir dados de exemplo (opcional)"""
    
    # Este m√©todo √© opcional - os templates s√£o definidos em c√≥digo
    # Pode ser usado para criar registros de teste
    
    print("üìù Templates de agentes s√£o definidos em c√≥digo (agent_templates_system.py)")
    print("   ‚Ä¢ medical_secretary: Secretariado M√©dico")
    print("   ‚Ä¢ media_performance_analyst: Analista de Performance de M√≠dia")
    
    return True

def main():
    """Executar migra√ß√£o completa"""
    print("üöÄ Iniciando migra√ß√£o do Sistema de Agentes Especializados")
    print("=" * 60)
    
    steps = [
        ("Criar tabela agent_configurations", create_agent_configurations_table),
        ("Criar tabela conversation_analytics", create_conversation_analytics_table),
        ("Verificar coluna agent_type em chats", add_agent_type_to_chats_table),
        ("Testar integra√ß√£o do sistema", test_system_integration),
        ("Configurar templates de agentes", insert_sample_agent_templates)
    ]
    
    success_count = 0
    
    for step_name, step_function in steps:
        print(f"\nüìã {step_name}...")
        try:
            if step_function():
                success_count += 1
            else:
                print(f"‚ö†Ô∏è  Falha em: {step_name}")
        except Exception as e:
            print(f"‚ùå Erro em {step_name}: {e}")
    
    print("\n" + "=" * 60)
    print(f"‚úÖ Migra√ß√£o conclu√≠da: {success_count}/{len(steps)} passos bem-sucedidos")
    
    if success_count == len(steps):
        print("\nüéâ MIGRA√á√ÉO 100% COMPLETA!")
        print("\nPr√≥ximos passos:")
        print("1. Deploy do backend atualizado:")
        print("   cd ~/saas-chat-generator/backend")
        print("   gcloud run deploy saas-chat-backend --source=.")
        print("\n2. Testar endpoints de agentes:")
        print("   GET /api/agent-templates")
        print("   POST /api/chats (com agent_configuration)")
        print("\n3. Configurar primeiro agente especializado no frontend")
        
        return True
    else:
        print(f"\n‚ö†Ô∏è  Migra√ß√£o parcial: {len(steps) - success_count} falhas")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
